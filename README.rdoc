  _   _     _   ___      _
 |*|_|*|___|*|_|*  |___ |*|_ ___ ___ ___
 | | | |*_ |   | | |* _|   _|*  |* _|*__|
 | | | | __| | |   | |_ | |_| | | | |__ |
 |_____|___|___|_|_|___||___|___|_| |___|

WebActors is a simple library for managing concurrency
in JavaScript programs. It's based on Erlang's
interpretation of the Actor Model.

= Building

== Build Requirements

WebActors doesn't have any special run-time requirements,
but it does require ruby, rake, the coffee_script gem, and
the YUI compressor to build from source.  (Eventually I'd
like to move to a pure JavaScript build system.)

A suitable version of YUI Compressor is availabile from
Ubuntu Universe as the <code>yui-compressor</code>
package.

== Running Rake

Running <code>rake</code> with no arguments will build everything.

The output files are:

 - dist/webactors.js - uncompressed version
 - dist/webactors.min.js - minfied version

The two should be functionally-equivalent.

= API

WebActors defines a single object in the top-level
namespace, unsurprisingly called WebActors.  It has a
number of properties and methods attached to it.

== Actors

=== WebActors.spawn(body) -> actor_id

The <code>spawn</code> method spawns a new actor, returning its id.

The actor will termiate after <code>body</code> returns, unless
<code>body</code> suspends the actor by calling <code>receive</code>.

=== WebActors.spawn_linked(body) -> actor_id

The <code>spawn_linked</code> method is similar to <code>spawn</code>, except
that it atomically links the spawned actor with the
current actor.

=== WebActors.send(actor_id, message)

Sends a message to another actor asynchronously. The
message is put in the receiving actor's mailbox, to
be retrieved with <code>receive</code>.

=== WebActors.receive(pattern, cont)

Sets up a one-shot handler to be called if a message
matching the given pattern arrives.  The pattern will
be structurally matched against candidate messages
using <code>match</code>; a list of captured subvalues will be
passed to the supplied continuation callback.

The set of outstanding receives for an actor is
cleared each time the actor successfully receives
a message.

If an actor doesn't establish any receives before
returning to the event loop, or if it raises an
uncaught exception, the actor will terminate.

=== WebActors.get_self()

The <code>get_self</code> method returns the id of the current
actor.

=== WebActors.link(actor_id)

The <code>link</code> method links the current actor with the given
actor, provided there wasn't already an existing link
between them.

<code>link</code> will raise an error if the named actor is dead or
doesn't exist.

=== WebActors.unlink(actor_id)

The <code>unlink</code> method unlinks the current actor from the
given actor, if there was an existing link between the
two.

<code>unlink</code> _won't_ raise an error if no actor with the given
id exists.

=== WebActors.trap_exit(fn)

Normally, when an actor receives an exit notification,
it will immediately exit.  <code>trap_exit</code> allows for more
nuanced behavior than the default, converting the
notification to a regular message.

This passed-in function receives two arguments: the id of
the originating (not the receiving!) actor, and the reason
to exit.  It should return a message to be delivered to
the receiving actor.

=== WebActors.send_exit(actor_id, exit_reason)

The <code>send_exit</code> method sends an exit notification to the
given actor whether or not it is linked.

== Pattern Matching

=== WebActors.match(pattern, value) -> result

<code>match</code> performs structural matching on JavaScript values.
It takes a pattern and a value, returning an array of
captured subvalues if the match is successful, or null
otherwise.

=== WebActors.any or WebActors.$_

<code>$_</code> matches any value without capturing it.

=== WebActors.capture or WebActors.$$

<code>$$</code> matches and captures any value; the match
may be further constrained by passing an argument to
<code>$$</code> as a function.
